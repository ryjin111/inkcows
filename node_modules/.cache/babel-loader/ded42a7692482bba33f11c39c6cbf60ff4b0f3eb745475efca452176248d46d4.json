{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\tiny\\\\ink-tiny-cows-mint\\\\src\\\\MintNFT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0xYourContractAddressHere\"; // Replace with your actual contract address\nconst CONTRACT_ABI = [{\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"quantity\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"mint\",\n  \"outputs\": [],\n  \"stateMutability\": \"payable\",\n  \"type\": \"function\"\n}\n// Add other functions from your ABI if needed\n];\nfunction MintNFT() {\n  _s();\n  const [mintPrice, setMintPrice] = useState(\"0\");\n  const [quantity, setQuantity] = useState(1);\n  const [status, setStatus] = useState(\"\");\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const signer = provider.getSigner();\n          const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n          const price = await contract.mintPrice();\n          setMintPrice(ethers.utils.formatEther(price));\n          setContract(contract);\n        } catch (error) {\n          setStatus(\"User denied account access\");\n          console.error(error);\n        }\n      } else {\n        setStatus(\"Please install MetaMask!\");\n      }\n    };\n    init();\n  }, []);\n  const handleMint = async () => {\n    if (contract) {\n      try {\n        setStatus(\"Minting...\");\n        const tx = await contract.mint(quantity, {\n          value: ethers.utils.parseEther((mintPrice * quantity).toString())\n        });\n        await tx.wait();\n        setStatus(\"Minting successful!\");\n      } catch (error) {\n        setStatus(`Minting failed: ${error.message}`);\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint Your InkTinyCow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Price: \", mintPrice, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Number to Mint:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => setQuantity(parseInt(e.target.value, 10)),\n        min: \"1\",\n        max: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMint,\n      children: \"Mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(MintNFT, \"3KwXUJV1PoE2BTbQkB3f+jzgT58=\");\n_c = MintNFT;\nexport default MintNFT;\nvar _c;\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","MintNFT","_s","mintPrice","setMintPrice","quantity","setQuantity","status","setStatus","provider","setProvider","signer","setSigner","contract","setContract","init","window","ethereum","request","method","providers","Web3Provider","getSigner","Contract","price","utils","formatEther","error","console","handleMint","tx","mint","value","parseEther","toString","wait","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","parseInt","target","min","max","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/tiny/ink-tiny-cows-mint/src/MintNFT.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst CONTRACT_ADDRESS = \"0xYourContractAddressHere\"; // Replace with your actual contract address\r\nconst CONTRACT_ABI = [\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"quantity\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"mint\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    // Add other functions from your ABI if needed\r\n];\r\n\r\nfunction MintNFT() {\r\n    const [mintPrice, setMintPrice] = useState(\"0\");\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [provider, setProvider] = useState(null);\r\n    const [signer, setSigner] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                try {\r\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n                    \r\n                    const price = await contract.mintPrice();\r\n                    setMintPrice(ethers.utils.formatEther(price));\r\n                    setContract(contract);\r\n                } catch (error) {\r\n                    setStatus(\"User denied account access\");\r\n                    console.error(error);\r\n                }\r\n            } else {\r\n                setStatus(\"Please install MetaMask!\");\r\n            }\r\n        };\r\n        init();\r\n    }, []);\r\n    const handleMint = async () => {\r\n        if (contract) {\r\n            try {\r\n                setStatus(\"Minting...\");\r\n                const tx = await contract.mint(quantity, { value: ethers.utils.parseEther((mintPrice * quantity).toString()) });\r\n                await tx.wait();\r\n                setStatus(\"Minting successful!\");\r\n            } catch (error) {\r\n                setStatus(`Minting failed: ${error.message}`);\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mint-container\">\r\n            <h1>Mint Your InkTinyCow</h1>\r\n            <p>Current Price: {mintPrice} ETH</p>\r\n            <label>\r\n                Number to Mint:\r\n                <input \r\n                    type=\"number\" \r\n                    value={quantity} \r\n                    onChange={(e) => setQuantity(parseInt(e.target.value, 10))} \r\n                    min=\"1\" max=\"20\" \r\n                />\r\n            </label>\r\n            <br />\r\n            <button onClick={handleMint}>Mint</button>\r\n            <p>{status}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MintNFT;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}