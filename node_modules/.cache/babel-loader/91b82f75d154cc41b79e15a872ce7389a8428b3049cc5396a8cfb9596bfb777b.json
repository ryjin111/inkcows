{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/addresses.js\";\nimport { keccak256, sha256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, isBytesLike, isHexString, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst BLOB_SIZE = 4096 * 32;\nfunction getVersionedHash(version, hash) {\n  let versioned = version.toString(16);\n  while (versioned.length < 2) {\n    versioned = \"0\" + versioned;\n  }\n  versioned += sha256(hash).substring(4);\n  return \"0x\" + versioned;\n}\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n  try {\n    return accessListify(value);\n  } catch (error) {\n    assertArgument(false, error.message, param, value);\n  }\n}\nfunction handleNumber(_value, param) {\n  if (_value === \"0x\") {\n    return 0;\n  }\n  return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n  if (_value === \"0x\") {\n    return BN_0;\n  }\n  const value = getBigInt(_value, param);\n  assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n  return value;\n}\nfunction formatNumber(_value, name) {\n  const value = getBigInt(_value, \"value\");\n  const result = toBeArray(value);\n  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n  return result;\n}\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\nfunction formatHashes(value, param) {\n  assertArgument(Array.isArray(value), `invalid ${param}`, \"value\", value);\n  for (let i = 0; i < value.length; i++) {\n    assertArgument(isHexString(value[i], 32), \"invalid ${ param } hash\", `value[${i}]`, value[i]);\n  }\n  return value;\n}\nfunction _parseLegacy(data) {\n  const fields = decodeRlp(data);\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n  const tx = {\n    type: 0,\n    nonce: handleNumber(fields[0], \"nonce\"),\n    gasPrice: handleUint(fields[1], \"gasPrice\"),\n    gasLimit: handleUint(fields[2], \"gasLimit\"),\n    to: handleAddress(fields[3]),\n    value: handleUint(fields[4], \"value\"),\n    data: hexlify(fields[5]),\n    chainId: BN_0\n  };\n  // Legacy unsigned transaction\n  if (fields.length === 6) {\n    return tx;\n  }\n  const v = handleUint(fields[6], \"v\");\n  const r = handleUint(fields[7], \"r\");\n  const s = handleUint(fields[8], \"s\");\n  if (r === BN_0 && s === BN_0) {\n    // EIP-155 unsigned transaction\n    tx.chainId = v;\n  } else {\n    // Compute the EIP-155 chain ID (or 0 for legacy)\n    let chainId = (v - BN_35) / BN_2;\n    if (chainId < BN_0) {\n      chainId = BN_0;\n    }\n    tx.chainId = chainId;\n    // Signed Legacy Transaction\n    assertArgument(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n    tx.signature = Signature.from({\n      r: zeroPadValue(fields[7], 32),\n      s: zeroPadValue(fields[8], 32),\n      v\n    });\n    //tx.hash = keccak256(data);\n  }\n  return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n  const fields = [formatNumber(tx.nonce, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit, \"gasLimit\"), tx.to || \"0x\", formatNumber(tx.value, \"value\"), tx.data];\n  let chainId = BN_0;\n  if (tx.chainId != BN_0) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = getBigInt(tx.chainId, \"tx.chainId\");\n    // We have a chainId in the tx and an EIP-155 v in the signature,\n    // make sure they agree with each other\n    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  } else if (tx.signature) {\n    // No explicit chainId, but EIP-155 have a derived implicit chainId\n    const legacy = tx.signature.legacyChainId;\n    if (legacy != null) {\n      chainId = legacy;\n    }\n  }\n  // Requesting an unsigned transaction\n  if (!sig) {\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== BN_0) {\n      fields.push(toBeArray(chainId));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    return encodeRlp(fields);\n  }\n  // @TODO: We should probably check that tx.signature, chainId, and sig\n  //        match but that logic could break existing code, so schedule\n  //        this for the next major bump.\n  // Compute the EIP-155 v\n  let v = BigInt(27 + sig.yParity);\n  if (chainId !== BN_0) {\n    v = Signature.getChainIdV(chainId, sig.v);\n  } else if (BigInt(sig.v) !== v) {\n    assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  }\n  // Add the signature\n  fields.push(toBeArray(v));\n  fields.push(toBeArray(sig.r));\n  fields.push(toBeArray(sig.s));\n  return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n  let yParity;\n  try {\n    yParity = handleNumber(fields[0], \"yParity\");\n    if (yParity !== 0 && yParity !== 1) {\n      throw new Error(\"bad yParity\");\n    }\n  } catch (error) {\n    assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n  }\n  const r = zeroPadValue(fields[1], 32);\n  const s = zeroPadValue(fields[2], 32);\n  const signature = Signature.from({\n    r,\n    s,\n    yParity\n  });\n  tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n  const tx = {\n    type: 2,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n    maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: hexlify(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\")\n  };\n  // Unsigned EIP-1559 Transaction\n  if (fields.length === 9) {\n    return tx;\n  }\n  //tx.hash = keccak256(data);\n  _parseEipSignature(tx, fields.slice(9));\n  return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n  const fields = [formatNumber(tx.chainId, \"chainId\"), formatNumber(tx.nonce, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit, \"gasLimit\"), tx.to || \"0x\", formatNumber(tx.value, \"value\"), tx.data, formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n  return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n  const fields = decodeRlp(getBytes(data).slice(1));\n  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n  const tx = {\n    type: 1,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    gasPrice: handleUint(fields[2], \"gasPrice\"),\n    gasLimit: handleUint(fields[3], \"gasLimit\"),\n    to: handleAddress(fields[4]),\n    value: handleUint(fields[5], \"value\"),\n    data: hexlify(fields[6]),\n    accessList: handleAccessList(fields[7], \"accessList\")\n  };\n  // Unsigned EIP-2930 Transaction\n  if (fields.length === 8) {\n    return tx;\n  }\n  //tx.hash = keccak256(data);\n  _parseEipSignature(tx, fields.slice(8));\n  return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n  const fields = [formatNumber(tx.chainId, \"chainId\"), formatNumber(tx.nonce, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit, \"gasLimit\"), tx.to || \"0x\", formatNumber(tx.value, \"value\"), tx.data, formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n  }\n  return concat([\"0x01\", encodeRlp(fields)]);\n}\nfunction _parseEip4844(data) {\n  let fields = decodeRlp(getBytes(data).slice(1));\n  let typeName = \"3\";\n  let blobs = null;\n  // Parse the network format\n  if (fields.length === 4 && Array.isArray(fields[0])) {\n    typeName = \"3 (network format)\";\n    const fBlobs = fields[1],\n      fCommits = fields[2],\n      fProofs = fields[3];\n    assertArgument(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\n    assertArgument(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\n    assertArgument(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\n    assertArgument(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\n    assertArgument(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\n    blobs = [];\n    for (let i = 0; i < fields[1].length; i++) {\n      blobs.push({\n        data: fBlobs[i],\n        commitment: fCommits[i],\n        proof: fProofs[i]\n      });\n    }\n    fields = fields[0];\n  }\n  assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, \"data\", hexlify(data));\n  const tx = {\n    type: 3,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n    maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: hexlify(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\"),\n    maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\n    blobVersionedHashes: fields[10]\n  };\n  if (blobs) {\n    tx.blobs = blobs;\n  }\n  assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, \"data\", data);\n  assertArgument(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\n  for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\n    assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, \"data\", data);\n  }\n  // Unsigned EIP-4844 Transaction\n  if (fields.length === 11) {\n    return tx;\n  }\n  // @TODO: Do we need to do this? This is only called internally\n  // and used to verify hashes; it might save time to not do this\n  //tx.hash = keccak256(concat([ \"0x03\", encodeRlp(fields) ]));\n  _parseEipSignature(tx, fields.slice(11));\n  return tx;\n}\nfunction _serializeEip4844(tx, sig, blobs) {\n  const fields = [formatNumber(tx.chainId, \"chainId\"), formatNumber(tx.nonce, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit, \"gasLimit\"), tx.to || ZeroAddress, formatNumber(tx.value, \"value\"), tx.data, formatAccessList(tx.accessList || []), formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"), formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    // We have blobs; return the network wrapped format\n    if (blobs) {\n      return concat([\"0x03\", encodeRlp([fields, blobs.map(b => b.data), blobs.map(b => b.commitment), blobs.map(b => b.proof)])]);\n    }\n  }\n  return concat([\"0x03\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n  #type;\n  #to;\n  #data;\n  #nonce;\n  #gasLimit;\n  #gasPrice;\n  #maxPriorityFeePerGas;\n  #maxFeePerGas;\n  #value;\n  #chainId;\n  #sig;\n  #accessList;\n  #maxFeePerBlobGas;\n  #blobVersionedHashes;\n  #kzg;\n  #blobs;\n  /**\n   *  The transaction type.\n   *\n   *  If null, the type will be automatically inferred based on\n   *  explicit properties.\n   */\n  get type() {\n    return this.#type;\n  }\n  set type(value) {\n    switch (value) {\n      case null:\n        this.#type = null;\n        break;\n      case 0:\n      case \"legacy\":\n        this.#type = 0;\n        break;\n      case 1:\n      case \"berlin\":\n      case \"eip-2930\":\n        this.#type = 1;\n        break;\n      case 2:\n      case \"london\":\n      case \"eip-1559\":\n        this.#type = 2;\n        break;\n      case 3:\n      case \"cancun\":\n      case \"eip-4844\":\n        this.#type = 3;\n        break;\n      default:\n        assertArgument(false, \"unsupported transaction type\", \"type\", value);\n    }\n  }\n  /**\n   *  The name of the transaction type.\n   */\n  get typeName() {\n    switch (this.type) {\n      case 0:\n        return \"legacy\";\n      case 1:\n        return \"eip-2930\";\n      case 2:\n        return \"eip-1559\";\n      case 3:\n        return \"eip-4844\";\n    }\n    return null;\n  }\n  /**\n   *  The ``to`` address for the transaction or ``null`` if the\n   *  transaction is an ``init`` transaction.\n   */\n  get to() {\n    const value = this.#to;\n    if (value == null && this.type === 3) {\n      return ZeroAddress;\n    }\n    return value;\n  }\n  set to(value) {\n    this.#to = value == null ? null : getAddress(value);\n  }\n  /**\n   *  The transaction nonce.\n   */\n  get nonce() {\n    return this.#nonce;\n  }\n  set nonce(value) {\n    this.#nonce = getNumber(value, \"value\");\n  }\n  /**\n   *  The gas limit.\n   */\n  get gasLimit() {\n    return this.#gasLimit;\n  }\n  set gasLimit(value) {\n    this.#gasLimit = getBigInt(value);\n  }\n  /**\n   *  The gas price.\n   *\n   *  On legacy networks this defines the fee that will be paid. On\n   *  EIP-1559 networks, this should be ``null``.\n   */\n  get gasPrice() {\n    const value = this.#gasPrice;\n    if (value == null && (this.type === 0 || this.type === 1)) {\n      return BN_0;\n    }\n    return value;\n  }\n  set gasPrice(value) {\n    this.#gasPrice = value == null ? null : getBigInt(value, \"gasPrice\");\n  }\n  /**\n   *  The maximum priority fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxPriorityFeePerGas() {\n    const value = this.#maxPriorityFeePerGas;\n    if (value == null) {\n      if (this.type === 2 || this.type === 3) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxPriorityFeePerGas(value) {\n    this.#maxPriorityFeePerGas = value == null ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n  }\n  /**\n   *  The maximum total fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxFeePerGas() {\n    const value = this.#maxFeePerGas;\n    if (value == null) {\n      if (this.type === 2 || this.type === 3) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxFeePerGas(value) {\n    this.#maxFeePerGas = value == null ? null : getBigInt(value, \"maxFeePerGas\");\n  }\n  /**\n   *  The transaction data. For ``init`` transactions this is the\n   *  deployment code.\n   */\n  get data() {\n    return this.#data;\n  }\n  set data(value) {\n    this.#data = hexlify(value);\n  }\n  /**\n   *  The amount of ether (in wei) to send in this transactions.\n   */\n  get value() {\n    return this.#value;\n  }\n  set value(value) {\n    this.#value = getBigInt(value, \"value\");\n  }\n  /**\n   *  The chain ID this transaction is valid on.\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = getBigInt(value);\n  }\n  /**\n   *  If signed, the signature for this transaction.\n   */\n  get signature() {\n    return this.#sig || null;\n  }\n  set signature(value) {\n    this.#sig = value == null ? null : Signature.from(value);\n  }\n  /**\n   *  The access list.\n   *\n   *  An access list permits discounted (but pre-paid) access to\n   *  bytecode and state variable access within contract execution.\n   */\n  get accessList() {\n    const value = this.#accessList || null;\n    if (value == null) {\n      if (this.type === 1 || this.type === 2 || this.type === 3) {\n        // @TODO: in v7, this should assign the value or become\n        // a live object itself, otherwise mutation is inconsistent\n        return [];\n      }\n      return null;\n    }\n    return value;\n  }\n  set accessList(value) {\n    this.#accessList = value == null ? null : accessListify(value);\n  }\n  /**\n   *  The max fee per blob gas for Cancun transactions.\n   */\n  get maxFeePerBlobGas() {\n    const value = this.#maxFeePerBlobGas;\n    if (value == null && this.type === 3) {\n      return BN_0;\n    }\n    return value;\n  }\n  set maxFeePerBlobGas(value) {\n    this.#maxFeePerBlobGas = value == null ? null : getBigInt(value, \"maxFeePerBlobGas\");\n  }\n  /**\n   *  The BLOb versioned hashes for Cancun transactions.\n   */\n  get blobVersionedHashes() {\n    // @TODO: Mutation is inconsistent; if unset, the returned value\n    // cannot mutate the object, if set it can\n    let value = this.#blobVersionedHashes;\n    if (value == null && this.type === 3) {\n      return [];\n    }\n    return value;\n  }\n  set blobVersionedHashes(value) {\n    if (value != null) {\n      assertArgument(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\n      value = value.slice();\n      for (let i = 0; i < value.length; i++) {\n        assertArgument(isHexString(value[i], 32), \"invalid blobVersionedHash\", `value[${i}]`, value[i]);\n      }\n    }\n    this.#blobVersionedHashes = value;\n  }\n  /**\n   *  The BLObs for the Transaction, if any.\n   *\n   *  If ``blobs`` is non-``null``, then the [[seriailized]]\n   *  will return the network formatted sidecar, otherwise it\n   *  will return the standard [[link-eip-2718]] payload. The\n   *  [[unsignedSerialized]] is unaffected regardless.\n   *\n   *  When setting ``blobs``, either fully valid [[Blob]] objects\n   *  may be specified (i.e. correctly padded, with correct\n   *  committments and proofs) or a raw [[BytesLike]] may\n   *  be provided.\n   *\n   *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\n   *  be already set. The blob will be correctly padded and the\n   *  [[KzgLibrary]] will be used to compute the committment and\n   *  proof for the blob.\n   *\n   *  A BLOb is a sequence of field elements, each of which must\n   *  be within the BLS field modulo, so some additional processing\n   *  may be required to encode arbitrary data to ensure each 32 byte\n   *  field is within the valid range.\n   *\n   *  Setting this automatically populates [[blobVersionedHashes]],\n   *  overwriting any existing values. Setting this to ``null``\n   *  does **not** remove the [[blobVersionedHashes]], leaving them\n   *  present.\n   */\n  get blobs() {\n    if (this.#blobs == null) {\n      return null;\n    }\n    return this.#blobs.map(b => Object.assign({}, b));\n  }\n  set blobs(_blobs) {\n    if (_blobs == null) {\n      this.#blobs = null;\n      return;\n    }\n    const blobs = [];\n    const versionedHashes = [];\n    for (let i = 0; i < _blobs.length; i++) {\n      const blob = _blobs[i];\n      if (isBytesLike(blob)) {\n        assert(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"set blobs()\"\n        });\n        let data = getBytes(blob);\n        assertArgument(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${i}]`, blob);\n        // Pad blob if necessary\n        if (data.length !== BLOB_SIZE) {\n          const padded = new Uint8Array(BLOB_SIZE);\n          padded.set(data);\n          data = padded;\n        }\n        const commit = this.#kzg.blobToKzgCommitment(data);\n        const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));\n        blobs.push({\n          data: hexlify(data),\n          commitment: hexlify(commit),\n          proof\n        });\n        versionedHashes.push(getVersionedHash(1, commit));\n      } else {\n        const commit = hexlify(blob.commitment);\n        blobs.push({\n          data: hexlify(blob.data),\n          commitment: commit,\n          proof: hexlify(blob.proof)\n        });\n        versionedHashes.push(getVersionedHash(1, commit));\n      }\n    }\n    this.#blobs = blobs;\n    this.#blobVersionedHashes = versionedHashes;\n  }\n  get kzg() {\n    return this.#kzg;\n  }\n  set kzg(kzg) {\n    this.#kzg = kzg;\n  }\n  /**\n   *  Creates a new Transaction with default values.\n   */\n  constructor() {\n    this.#type = null;\n    this.#to = null;\n    this.#nonce = 0;\n    this.#gasLimit = BN_0;\n    this.#gasPrice = null;\n    this.#maxPriorityFeePerGas = null;\n    this.#maxFeePerGas = null;\n    this.#data = \"0x\";\n    this.#value = BN_0;\n    this.#chainId = BN_0;\n    this.#sig = null;\n    this.#accessList = null;\n    this.#maxFeePerBlobGas = null;\n    this.#blobVersionedHashes = null;\n    this.#blobs = null;\n    this.#kzg = null;\n  }\n  /**\n   *  The transaction hash, if signed. Otherwise, ``null``.\n   */\n  get hash() {\n    if (this.signature == null) {\n      return null;\n    }\n    return keccak256(this.#getSerialized(true, false));\n  }\n  /**\n   *  The pre-image hash of this transaction.\n   *\n   *  This is the digest that a [[Signer]] must sign to authorize\n   *  this transaction.\n   */\n  get unsignedHash() {\n    return keccak256(this.unsignedSerialized);\n  }\n  /**\n   *  The sending address, if signed. Otherwise, ``null``.\n   */\n  get from() {\n    if (this.signature == null) {\n      return null;\n    }\n    return recoverAddress(this.unsignedHash, this.signature);\n  }\n  /**\n   *  The public key of the sender, if signed. Otherwise, ``null``.\n   */\n  get fromPublicKey() {\n    if (this.signature == null) {\n      return null;\n    }\n    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n  }\n  /**\n   *  Returns true if signed.\n   *\n   *  This provides a Type Guard that properties requiring a signed\n   *  transaction are non-null.\n   */\n  isSigned() {\n    return this.signature != null;\n  }\n  #getSerialized(signed, sidecar) {\n    assert(!signed || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n    const sig = signed ? this.signature : null;\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this, sig);\n      case 1:\n        return _serializeEip2930(this, sig);\n      case 2:\n        return _serializeEip1559(this, sig);\n      case 3:\n        return _serializeEip4844(this, sig, sidecar ? this.blobs : null);\n    }\n    assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n  }\n  /**\n   *  The serialized transaction.\n   *\n   *  This throws if the transaction is unsigned. For the pre-image,\n   *  use [[unsignedSerialized]].\n   */\n  get serialized() {\n    return this.#getSerialized(true, true);\n  }\n  /**\n   *  The transaction pre-image.\n   *\n   *  The hash of this is the digest which needs to be signed to\n   *  authorize this transaction.\n   */\n  get unsignedSerialized() {\n    return this.#getSerialized(false, false);\n  }\n  /**\n   *  Return the most \"likely\" type; currently the highest\n   *  supported transaction type.\n   */\n  inferType() {\n    const types = this.inferTypes();\n    // Prefer London (EIP-1559) over Cancun (BLOb)\n    if (types.indexOf(2) >= 0) {\n      return 2;\n    }\n    // Return the highest inferred type\n    return types.pop();\n  }\n  /**\n   *  Validates the explicit properties and returns a list of compatible\n   *  transaction types.\n   */\n  inferTypes() {\n    // Checks that there are no conflicting properties set\n    const hasGasPrice = this.gasPrice != null;\n    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n    const hasAccessList = this.accessList != null;\n    const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;\n    //if (hasGasPrice && hasFee) {\n    //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n    //}\n    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n        value: this\n      });\n    }\n    //if (this.type === 2 && hasGasPrice) {\n    //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n    //}\n    assert(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n      value: this\n    });\n    assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n      value: this\n    });\n    const types = [];\n    // Explicit type\n    if (this.type != null) {\n      types.push(this.type);\n    } else {\n      if (hasFee) {\n        types.push(2);\n      } else if (hasGasPrice) {\n        types.push(1);\n        if (!hasAccessList) {\n          types.push(0);\n        }\n      } else if (hasAccessList) {\n        types.push(1);\n        types.push(2);\n      } else if (hasBlob && this.to) {\n        types.push(3);\n      } else {\n        types.push(0);\n        types.push(1);\n        types.push(2);\n        types.push(3);\n      }\n    }\n    types.sort();\n    return types;\n  }\n  /**\n   *  Returns true if this transaction is a legacy transaction (i.e.\n   *  ``type === 0``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if this transaction is berlin hardform transaction (i.e.\n   *  ``type === 1``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if this transaction is london hardform transaction (i.e.\n   *  ``type === 2``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Returns true if this transaction is an [[link-eip-4844]] BLOB\n   *  transaction.\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isCancun() {\n    return this.type === 3;\n  }\n  /**\n   *  Create a copy of this transaciton.\n   */\n  clone() {\n    return Transaction.from(this);\n  }\n  /**\n   *  Return a JSON-friendly object.\n   */\n  toJSON() {\n    const s = v => {\n      if (v == null) {\n        return null;\n      }\n      return v.toString();\n    };\n    return {\n      type: this.type,\n      to: this.to,\n      //            from: this.from,\n      data: this.data,\n      nonce: this.nonce,\n      gasLimit: s(this.gasLimit),\n      gasPrice: s(this.gasPrice),\n      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n      maxFeePerGas: s(this.maxFeePerGas),\n      value: s(this.value),\n      chainId: s(this.chainId),\n      sig: this.signature ? this.signature.toJSON() : null,\n      accessList: this.accessList\n    };\n  }\n  /**\n   *  Create a **Transaction** from a serialized transaction or a\n   *  Transaction-like object.\n   */\n  static from(tx) {\n    if (tx == null) {\n      return new Transaction();\n    }\n    if (typeof tx === \"string\") {\n      const payload = getBytes(tx);\n      if (payload[0] >= 0x7f) {\n        // @TODO: > vs >= ??\n        return Transaction.from(_parseLegacy(payload));\n      }\n      switch (payload[0]) {\n        case 1:\n          return Transaction.from(_parseEip2930(payload));\n        case 2:\n          return Transaction.from(_parseEip1559(payload));\n        case 3:\n          return Transaction.from(_parseEip4844(payload));\n      }\n      assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"from\"\n      });\n    }\n    const result = new Transaction();\n    if (tx.type != null) {\n      result.type = tx.type;\n    }\n    if (tx.to != null) {\n      result.to = tx.to;\n    }\n    if (tx.nonce != null) {\n      result.nonce = tx.nonce;\n    }\n    if (tx.gasLimit != null) {\n      result.gasLimit = tx.gasLimit;\n    }\n    if (tx.gasPrice != null) {\n      result.gasPrice = tx.gasPrice;\n    }\n    if (tx.maxPriorityFeePerGas != null) {\n      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n    }\n    if (tx.maxFeePerGas != null) {\n      result.maxFeePerGas = tx.maxFeePerGas;\n    }\n    if (tx.maxFeePerBlobGas != null) {\n      result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\n    }\n    if (tx.data != null) {\n      result.data = tx.data;\n    }\n    if (tx.value != null) {\n      result.value = tx.value;\n    }\n    if (tx.chainId != null) {\n      result.chainId = tx.chainId;\n    }\n    if (tx.signature != null) {\n      result.signature = Signature.from(tx.signature);\n    }\n    if (tx.accessList != null) {\n      result.accessList = tx.accessList;\n    }\n    // This will get overwritten by blobs, if present\n    if (tx.blobVersionedHashes != null) {\n      result.blobVersionedHashes = tx.blobVersionedHashes;\n    }\n    // Make sure we assign the kzg before assigning blobs, which\n    // require the library in the event raw blob data is provided.\n    if (tx.kzg != null) {\n      result.kzg = tx.kzg;\n    }\n    if (tx.blobs != null) {\n      result.blobs = tx.blobs;\n    }\n    if (tx.hash != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\n      assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n    }\n    if (tx.from != null) {\n      assertArgument(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\n      assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["getAddress","ZeroAddress","keccak256","sha256","Signature","SigningKey","concat","decodeRlp","encodeRlp","getBytes","getBigInt","getNumber","hexlify","assert","assertArgument","isBytesLike","isHexString","toBeArray","zeroPadValue","accessListify","recoverAddress","BN_0","BigInt","BN_2","BN_27","BN_28","BN_35","BN_MAX_UINT","BLOB_SIZE","getVersionedHash","version","hash","versioned","toString","length","substring","handleAddress","value","handleAccessList","param","error","message","handleNumber","_value","handleUint","formatNumber","name","result","formatAccessList","map","set","address","storageKeys","formatHashes","Array","isArray","i","_parseLegacy","data","fields","tx","type","nonce","gasPrice","gasLimit","to","chainId","v","r","s","signature","from","_serializeLegacy","sig","networkV","legacyChainId","legacy","push","yParity","getChainIdV","_parseEipSignature","Error","_parseEip1559","slice","maxPriorityFeePerGas","maxFeePerGas","accessList","_serializeEip1559","_parseEip2930","_serializeEip2930","_parseEip4844","typeName","blobs","fBlobs","fCommits","fProofs","commitment","proof","maxFeePerBlobGas","blobVersionedHashes","_serializeEip4844","b","Transaction","kzg","Object","assign","_blobs","versionedHashes","blob","operation","padded","Uint8Array","commit","blobToKzgCommitment","computeBlobKzgProof","constructor","getSerialized","unsignedHash","unsignedSerialized","fromPublicKey","recoverPublicKey","isSigned","#getSerialized","signed","sidecar","inferType","serialized","types","inferTypes","indexOf","pop","hasGasPrice","hasFee","hasAccessList","hasBlob","sort","isLegacy","isBerlin","isLondon","isCancun","clone","toJSON","payload","toLowerCase"],"sources":["C:/Users/Administrator/Desktop/tiny/ink-tiny-cows-mint/node_modules/ethers/lib.esm/transaction/transaction.js"],"sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/addresses.js\";\nimport { keccak256, sha256, Signature, SigningKey } from \"../crypto/index.js\";\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, isBytesLike, isHexString, toBeArray, zeroPadValue } from \"../utils/index.js\";\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst BLOB_SIZE = 4096 * 32;\nfunction getVersionedHash(version, hash) {\n    let versioned = version.toString(16);\n    while (versioned.length < 2) {\n        versioned = \"0\" + versioned;\n    }\n    versioned += sha256(hash).substring(4);\n    return \"0x\" + versioned;\n}\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleAccessList(value, param) {\n    try {\n        return accessListify(value);\n    }\n    catch (error) {\n        assertArgument(false, error.message, param, value);\n    }\n}\nfunction handleNumber(_value, param) {\n    if (_value === \"0x\") {\n        return 0;\n    }\n    return getNumber(_value, param);\n}\nfunction handleUint(_value, param) {\n    if (_value === \"0x\") {\n        return BN_0;\n    }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\nfunction formatNumber(_value, name) {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction formatHashes(value, param) {\n    assertArgument(Array.isArray(value), `invalid ${param}`, \"value\", value);\n    for (let i = 0; i < value.length; i++) {\n        assertArgument(isHexString(value[i], 32), \"invalid ${ param } hash\", `value[${i}]`, value[i]);\n    }\n    return value;\n}\nfunction _parseLegacy(data) {\n    const fields = decodeRlp(data);\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n    const tx = {\n        type: 0,\n        nonce: handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to: handleAddress(fields[3]),\n        value: handleUint(fields[4], \"value\"),\n        data: hexlify(fields[5]),\n        chainId: BN_0\n    };\n    // Legacy unsigned transaction\n    if (fields.length === 6) {\n        return tx;\n    }\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n    }\n    else {\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) {\n            chainId = BN_0;\n        }\n        tx.chainId = chainId;\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n        //tx.hash = keccak256(data);\n    }\n    return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n    const fields = [\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n    ];\n    let chainId = BN_0;\n    if (tx.chainId != BN_0) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    else if (tx.signature) {\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\n        const legacy = tx.signature.legacyChainId;\n        if (legacy != null) {\n            chainId = legacy;\n        }\n    }\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n        return encodeRlp(fields);\n    }\n    // @TODO: We should probably check that tx.signature, chainId, and sig\n    //        match but that logic could break existing code, so schedule\n    //        this for the next major bump.\n    // Compute the EIP-155 v\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    }\n    else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n    // Add the signature\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n    return encodeRlp(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n    let yParity;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) {\n            throw new Error(\"bad yParity\");\n        }\n    }\n    catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n    const tx = {\n        type: 2,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: hexlify(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) {\n        return tx;\n    }\n    //tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(9));\n    return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x02\", encodeRlp(fields)]);\n}\nfunction _parseEip2930(data) {\n    const fields = decodeRlp(getBytes(data).slice(1));\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n    const tx = {\n        type: 1,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\n        to: handleAddress(fields[4]),\n        value: handleUint(fields[5], \"value\"),\n        data: hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) {\n        return tx;\n    }\n    //tx.hash = keccak256(data);\n    _parseEipSignature(tx, fields.slice(8));\n    return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || \"0x\"),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || [])\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n    return concat([\"0x01\", encodeRlp(fields)]);\n}\nfunction _parseEip4844(data) {\n    let fields = decodeRlp(getBytes(data).slice(1));\n    let typeName = \"3\";\n    let blobs = null;\n    // Parse the network format\n    if (fields.length === 4 && Array.isArray(fields[0])) {\n        typeName = \"3 (network format)\";\n        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];\n        assertArgument(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\n        assertArgument(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\n        assertArgument(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\n        assertArgument(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\n        assertArgument(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\n        blobs = [];\n        for (let i = 0; i < fields[1].length; i++) {\n            blobs.push({\n                data: fBlobs[i],\n                commitment: fCommits[i],\n                proof: fProofs[i],\n            });\n        }\n        fields = fields[0];\n    }\n    assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, \"data\", hexlify(data));\n    const tx = {\n        type: 3,\n        chainId: handleUint(fields[0], \"chainId\"),\n        nonce: handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\n        gasPrice: null,\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\n        to: handleAddress(fields[5]),\n        value: handleUint(fields[6], \"value\"),\n        data: hexlify(fields[7]),\n        accessList: handleAccessList(fields[8], \"accessList\"),\n        maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\n        blobVersionedHashes: fields[10]\n    };\n    if (blobs) {\n        tx.blobs = blobs;\n    }\n    assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, \"data\", data);\n    assertArgument(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\n    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\n        assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, \"data\", data);\n    }\n    // Unsigned EIP-4844 Transaction\n    if (fields.length === 11) {\n        return tx;\n    }\n    // @TODO: Do we need to do this? This is only called internally\n    // and used to verify hashes; it might save time to not do this\n    //tx.hash = keccak256(concat([ \"0x03\", encodeRlp(fields) ]));\n    _parseEipSignature(tx, fields.slice(11));\n    return tx;\n}\nfunction _serializeEip4844(tx, sig, blobs) {\n    const fields = [\n        formatNumber(tx.chainId, \"chainId\"),\n        formatNumber(tx.nonce, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit, \"gasLimit\"),\n        (tx.to || ZeroAddress),\n        formatNumber(tx.value, \"value\"),\n        tx.data,\n        formatAccessList(tx.accessList || []),\n        formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\n        formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")\n    ];\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n        // We have blobs; return the network wrapped format\n        if (blobs) {\n            return concat([\n                \"0x03\",\n                encodeRlp([\n                    fields,\n                    blobs.map((b) => b.data),\n                    blobs.map((b) => b.commitment),\n                    blobs.map((b) => b.proof),\n                ])\n            ]);\n        }\n    }\n    return concat([\"0x03\", encodeRlp(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction {\n    #type;\n    #to;\n    #data;\n    #nonce;\n    #gasLimit;\n    #gasPrice;\n    #maxPriorityFeePerGas;\n    #maxFeePerGas;\n    #value;\n    #chainId;\n    #sig;\n    #accessList;\n    #maxFeePerBlobGas;\n    #blobVersionedHashes;\n    #kzg;\n    #blobs;\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type() { return this.#type; }\n    set type(value) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0:\n            case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1:\n            case \"berlin\":\n            case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2:\n            case \"london\":\n            case \"eip-1559\":\n                this.#type = 2;\n                break;\n            case 3:\n            case \"cancun\":\n            case \"eip-4844\":\n                this.#type = 3;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName() {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n            case 3: return \"eip-4844\";\n        }\n        return null;\n    }\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to() {\n        const value = this.#to;\n        if (value == null && this.type === 3) {\n            return ZeroAddress;\n        }\n        return value;\n    }\n    set to(value) {\n        this.#to = (value == null) ? null : getAddress(value);\n    }\n    /**\n     *  The transaction nonce.\n     */\n    get nonce() { return this.#nonce; }\n    set nonce(value) { this.#nonce = getNumber(value, \"value\"); }\n    /**\n     *  The gas limit.\n     */\n    get gasLimit() { return this.#gasLimit; }\n    set gasLimit(value) { this.#gasLimit = getBigInt(value); }\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice() {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) {\n            return BN_0;\n        }\n        return value;\n    }\n    set gasPrice(value) {\n        this.#gasPrice = (value == null) ? null : getBigInt(value, \"gasPrice\");\n    }\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas() {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value) {\n        this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas() {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2 || this.type === 3) {\n                return BN_0;\n            }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value) {\n        this.#maxFeePerGas = (value == null) ? null : getBigInt(value, \"maxFeePerGas\");\n    }\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data() { return this.#data; }\n    set data(value) { this.#data = hexlify(value); }\n    /**\n     *  The amount of ether (in wei) to send in this transactions.\n     */\n    get value() { return this.#value; }\n    set value(value) {\n        this.#value = getBigInt(value, \"value\");\n    }\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = getBigInt(value); }\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature() { return this.#sig || null; }\n    set signature(value) {\n        this.#sig = (value == null) ? null : Signature.from(value);\n    }\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList() {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\n                // @TODO: in v7, this should assign the value or become\n                // a live object itself, otherwise mutation is inconsistent\n                return [];\n            }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value) {\n        this.#accessList = (value == null) ? null : accessListify(value);\n    }\n    /**\n     *  The max fee per blob gas for Cancun transactions.\n     */\n    get maxFeePerBlobGas() {\n        const value = this.#maxFeePerBlobGas;\n        if (value == null && this.type === 3) {\n            return BN_0;\n        }\n        return value;\n    }\n    set maxFeePerBlobGas(value) {\n        this.#maxFeePerBlobGas = (value == null) ? null : getBigInt(value, \"maxFeePerBlobGas\");\n    }\n    /**\n     *  The BLOb versioned hashes for Cancun transactions.\n     */\n    get blobVersionedHashes() {\n        // @TODO: Mutation is inconsistent; if unset, the returned value\n        // cannot mutate the object, if set it can\n        let value = this.#blobVersionedHashes;\n        if (value == null && this.type === 3) {\n            return [];\n        }\n        return value;\n    }\n    set blobVersionedHashes(value) {\n        if (value != null) {\n            assertArgument(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\n            value = value.slice();\n            for (let i = 0; i < value.length; i++) {\n                assertArgument(isHexString(value[i], 32), \"invalid blobVersionedHash\", `value[${i}]`, value[i]);\n            }\n        }\n        this.#blobVersionedHashes = value;\n    }\n    /**\n     *  The BLObs for the Transaction, if any.\n     *\n     *  If ``blobs`` is non-``null``, then the [[seriailized]]\n     *  will return the network formatted sidecar, otherwise it\n     *  will return the standard [[link-eip-2718]] payload. The\n     *  [[unsignedSerialized]] is unaffected regardless.\n     *\n     *  When setting ``blobs``, either fully valid [[Blob]] objects\n     *  may be specified (i.e. correctly padded, with correct\n     *  committments and proofs) or a raw [[BytesLike]] may\n     *  be provided.\n     *\n     *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\n     *  be already set. The blob will be correctly padded and the\n     *  [[KzgLibrary]] will be used to compute the committment and\n     *  proof for the blob.\n     *\n     *  A BLOb is a sequence of field elements, each of which must\n     *  be within the BLS field modulo, so some additional processing\n     *  may be required to encode arbitrary data to ensure each 32 byte\n     *  field is within the valid range.\n     *\n     *  Setting this automatically populates [[blobVersionedHashes]],\n     *  overwriting any existing values. Setting this to ``null``\n     *  does **not** remove the [[blobVersionedHashes]], leaving them\n     *  present.\n     */\n    get blobs() {\n        if (this.#blobs == null) {\n            return null;\n        }\n        return this.#blobs.map((b) => Object.assign({}, b));\n    }\n    set blobs(_blobs) {\n        if (_blobs == null) {\n            this.#blobs = null;\n            return;\n        }\n        const blobs = [];\n        const versionedHashes = [];\n        for (let i = 0; i < _blobs.length; i++) {\n            const blob = _blobs[i];\n            if (isBytesLike(blob)) {\n                assert(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"set blobs()\"\n                });\n                let data = getBytes(blob);\n                assertArgument(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${i}]`, blob);\n                // Pad blob if necessary\n                if (data.length !== BLOB_SIZE) {\n                    const padded = new Uint8Array(BLOB_SIZE);\n                    padded.set(data);\n                    data = padded;\n                }\n                const commit = this.#kzg.blobToKzgCommitment(data);\n                const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));\n                blobs.push({\n                    data: hexlify(data),\n                    commitment: hexlify(commit),\n                    proof\n                });\n                versionedHashes.push(getVersionedHash(1, commit));\n            }\n            else {\n                const commit = hexlify(blob.commitment);\n                blobs.push({\n                    data: hexlify(blob.data),\n                    commitment: commit,\n                    proof: hexlify(blob.proof)\n                });\n                versionedHashes.push(getVersionedHash(1, commit));\n            }\n        }\n        this.#blobs = blobs;\n        this.#blobVersionedHashes = versionedHashes;\n    }\n    get kzg() { return this.#kzg; }\n    set kzg(kzg) {\n        this.#kzg = kzg;\n    }\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BN_0;\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BN_0;\n        this.#chainId = BN_0;\n        this.#sig = null;\n        this.#accessList = null;\n        this.#maxFeePerBlobGas = null;\n        this.#blobVersionedHashes = null;\n        this.#blobs = null;\n        this.#kzg = null;\n    }\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash() {\n        if (this.signature == null) {\n            return null;\n        }\n        return keccak256(this.#getSerialized(true, false));\n    }\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash() {\n        return keccak256(this.unsignedSerialized);\n    }\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from() {\n        if (this.signature == null) {\n            return null;\n        }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey() {\n        if (this.signature == null) {\n            return null;\n        }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned() {\n        return this.signature != null;\n    }\n    #getSerialized(signed, sidecar) {\n        assert(!signed || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n        const sig = signed ? this.signature : null;\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, sig);\n            case 1:\n                return _serializeEip2930(this, sig);\n            case 2:\n                return _serializeEip1559(this, sig);\n            case 3:\n                return _serializeEip4844(this, sig, sidecar ? this.blobs : null);\n        }\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized() {\n        return this.#getSerialized(true, true);\n    }\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized() {\n        return this.#getSerialized(false, false);\n    }\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType() {\n        const types = this.inferTypes();\n        // Prefer London (EIP-1559) over Cancun (BLOb)\n        if (types.indexOf(2) >= 0) {\n            return 2;\n        }\n        // Return the highest inferred type\n        return (types.pop());\n    }\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes() {\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n        const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\n        const types = [];\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n        }\n        else {\n            if (hasFee) {\n                types.push(2);\n            }\n            else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) {\n                    types.push(0);\n                }\n            }\n            else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            }\n            else if (hasBlob && this.to) {\n                types.push(3);\n            }\n            else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n                types.push(3);\n            }\n        }\n        types.sort();\n        return types;\n    }\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Returns true if this transaction is an [[link-eip-4844]] BLOB\n     *  transaction.\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isCancun() {\n        return (this.type === 3);\n    }\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone() {\n        return Transaction.from(this);\n    }\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON() {\n        const s = (v) => {\n            if (v == null) {\n                return null;\n            }\n            return v.toString();\n        };\n        return {\n            type: this.type,\n            to: this.to,\n            //            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON() : null,\n            accessList: this.accessList\n        };\n    }\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx) {\n        if (tx == null) {\n            return new Transaction();\n        }\n        if (typeof (tx) === \"string\") {\n            const payload = getBytes(tx);\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n            switch (payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n                case 3: return Transaction.from(_parseEip4844(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n        const result = new Transaction();\n        if (tx.type != null) {\n            result.type = tx.type;\n        }\n        if (tx.to != null) {\n            result.to = tx.to;\n        }\n        if (tx.nonce != null) {\n            result.nonce = tx.nonce;\n        }\n        if (tx.gasLimit != null) {\n            result.gasLimit = tx.gasLimit;\n        }\n        if (tx.gasPrice != null) {\n            result.gasPrice = tx.gasPrice;\n        }\n        if (tx.maxPriorityFeePerGas != null) {\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n        }\n        if (tx.maxFeePerGas != null) {\n            result.maxFeePerGas = tx.maxFeePerGas;\n        }\n        if (tx.maxFeePerBlobGas != null) {\n            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\n        }\n        if (tx.data != null) {\n            result.data = tx.data;\n        }\n        if (tx.value != null) {\n            result.value = tx.value;\n        }\n        if (tx.chainId != null) {\n            result.chainId = tx.chainId;\n        }\n        if (tx.signature != null) {\n            result.signature = Signature.from(tx.signature);\n        }\n        if (tx.accessList != null) {\n            result.accessList = tx.accessList;\n        }\n        // This will get overwritten by blobs, if present\n        if (tx.blobVersionedHashes != null) {\n            result.blobVersionedHashes = tx.blobVersionedHashes;\n        }\n        // Make sure we assign the kzg before assigning blobs, which\n        // require the library in the event raw blob data is provided.\n        if (tx.kzg != null) {\n            result.kzg = tx.kzg;\n        }\n        if (tx.blobs != null) {\n            result.blobs = tx.blobs;\n        }\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=transaction.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}