{"ast":null,"code":"/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n  /**\n   *  The event filter.\n   */\n  filter;\n  /**\n   *  The **EventEmitterable**.\n   */\n  emitter;\n  #listener;\n  /**\n   *  Create a new **EventPayload** for %%emitter%% with\n   *  the %%listener%% and for %%filter%%.\n   */\n  constructor(emitter, listener, filter) {\n    this.#listener = listener;\n    defineProperties(this, {\n      emitter,\n      filter\n    });\n  }\n  /**\n   *  Unregister the triggered listener for future events.\n   */\n  async removeListener() {\n    if (this.#listener == null) {\n      return;\n    }\n    await this.emitter.off(this.filter, this.#listener);\n  }\n}","map":{"version":3,"names":["defineProperties","EventPayload","filter","emitter","listener","constructor","removeListener","off"],"sources":["../../src.ts/utils/events.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;AAOA,SAASA,gBAAgB,QAAQ,iBAAiB;AA+DlD;;;;;AAKA,OAAM,MAAOC,YAAY;EACrB;;;EAGSC,MAAM;EAEf;;;EAGSC,OAAO;EAEP,CAAAC,QAAS;EAElB;;;;EAIAC,YAAYF,OAA4B,EAAEC,QAAyB,EAAEF,MAAS;IAC1E,IAAI,CAAC,CAAAE,QAAS,GAAGA,QAAQ;IACzBJ,gBAAgB,CAAoB,IAAI,EAAE;MAAEG,OAAO;MAAED;IAAM,CAAE,CAAC;EAClE;EAEA;;;EAGA,MAAMI,cAAcA,CAAA;IAChB,IAAI,IAAI,CAAC,CAAAF,QAAS,IAAI,IAAI,EAAE;MAAE;;IAC9B,MAAM,IAAI,CAACD,OAAO,CAACI,GAAG,CAAC,IAAI,CAACL,MAAM,EAAE,IAAI,CAAC,CAAAE,QAAS,CAAC;EACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}