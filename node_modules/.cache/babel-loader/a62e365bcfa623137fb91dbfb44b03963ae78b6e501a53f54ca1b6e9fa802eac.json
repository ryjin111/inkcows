{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\tiny\\\\ink-tiny-cows-mint\\\\src\\\\MintNFT.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x79Ed2B138DaD3B73896e0d7c9116f9762b4ddb77\"; // Replace with your actual contract address\nconst CONTRACT_ABI = [{\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"quantity\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"mint\",\n  \"outputs\": [],\n  \"stateMutability\": \"payable\",\n  \"type\": \"function\"\n}\n// Add other functions from your ABI if needed\n];\nfunction MintNFT() {\n  _s();\n  const [mintPrice, setMintPrice] = useState(\"0\");\n  const [quantity, setQuantity] = useState(1);\n  const [status, setStatus] = useState(\"\");\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          // Request accounts\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          // Check if on Base Sepolia\n          const chainId = await window.ethereum.request({\n            method: 'eth_chainId'\n          });\n          if (parseInt(chainId, 16) !== BASE_SEPOLIA_CHAIN_ID) {\n            // Switch to Base Sepolia if not already on it\n            await window.ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{\n                chainId: `0x${BASE_SEPOLIA_CHAIN_ID.toString(16)}`\n              }]\n            });\n          }\n\n          // Set up provider and signer\n          const provider = new ethers.BrowserProvider(window.ethereum, BASE_SEPOLIA_CHAIN_ID);\n          const signer = await provider.getSigner();\n          const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n          const price = await contract.mintPrice();\n          setMintPrice(ethers.formatEther(price));\n          setContract(contract);\n        } catch (error) {\n          if (error.code === 4902) {\n            // If the chain is not added to MetaMask, prompt to add it\n            try {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainId: `0x${BASE_SEPOLIA_CHAIN_ID.toString(16)}`,\n                  chainName: 'Base Sepolia',\n                  nativeCurrency: {\n                    name: 'Ether',\n                    symbol: 'ETH',\n                    decimals: 18\n                  },\n                  rpcUrls: [BASE_SEPOLIA_RPC_URL],\n                  blockExplorerUrls: ['https://sepolia.basescan.org/']\n                }]\n              });\n            } catch (addError) {\n              setStatus(\"Failed to add Base Sepolia network\");\n              console.error(addError);\n            }\n          } else {\n            setStatus(\"User denied account access or network switch\");\n            console.error(error);\n          }\n        }\n      } else {\n        setStatus(\"Please install MetaMask!\");\n      }\n    };\n    init();\n  }, []);\n  const handleMint = async () => {\n    if (contract) {\n      try {\n        setStatus(\"Minting...\");\n        const tx = await contract.mint(quantity, {\n          value: ethers.parseEther((mintPrice * quantity).toString())\n        });\n        await tx.wait();\n        setStatus(\"Minting successful!\");\n      } catch (error) {\n        setStatus(`Minting failed: ${error.message}`);\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint Your InkTinyCow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Price: \", mintPrice, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Number to Mint:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => setQuantity(parseInt(e.target.value, 10)),\n        min: \"1\",\n        max: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMint,\n      children: \"Mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(MintNFT, \"3KwXUJV1PoE2BTbQkB3f+jzgT58=\");\n_c = MintNFT;\nexport default MintNFT;\nvar _c;\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","MintNFT","_s","mintPrice","setMintPrice","quantity","setQuantity","status","setStatus","provider","setProvider","signer","setSigner","contract","setContract","init","window","ethereum","request","method","chainId","parseInt","BASE_SEPOLIA_CHAIN_ID","params","toString","BrowserProvider","getSigner","Contract","price","formatEther","error","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","BASE_SEPOLIA_RPC_URL","blockExplorerUrls","addError","console","handleMint","tx","mint","value","parseEther","wait","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","min","max","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/tiny/ink-tiny-cows-mint/src/MintNFT.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst CONTRACT_ADDRESS = \"0x79Ed2B138DaD3B73896e0d7c9116f9762b4ddb77\"; // Replace with your actual contract address\r\nconst CONTRACT_ABI = [\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"quantity\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"mint\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    // Add other functions from your ABI if needed\r\n];\r\n\r\nfunction MintNFT() {\r\n    const [mintPrice, setMintPrice] = useState(\"0\");\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [provider, setProvider] = useState(null);\r\n    const [signer, setSigner] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                try {\r\n                    // Request accounts\r\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    \r\n                    // Check if on Base Sepolia\r\n                    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n                    if (parseInt(chainId, 16) !== BASE_SEPOLIA_CHAIN_ID) {\r\n                        // Switch to Base Sepolia if not already on it\r\n                        await window.ethereum.request({\r\n                            method: 'wallet_switchEthereumChain',\r\n                            params: [{ chainId: `0x${BASE_SEPOLIA_CHAIN_ID.toString(16)}` }],\r\n                        });\r\n                    }\r\n    \r\n                    // Set up provider and signer\r\n                    const provider = new ethers.BrowserProvider(window.ethereum, BASE_SEPOLIA_CHAIN_ID);\r\n                    const signer = await provider.getSigner();\r\n                    const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\r\n                    \r\n                    const price = await contract.mintPrice();\r\n                    setMintPrice(ethers.formatEther(price));\r\n                    setContract(contract);\r\n                } catch (error) {\r\n                    if (error.code === 4902) {\r\n                        // If the chain is not added to MetaMask, prompt to add it\r\n                        try {\r\n                            await window.ethereum.request({\r\n                                method: 'wallet_addEthereumChain',\r\n                                params: [\r\n                                    {\r\n                                        chainId: `0x${BASE_SEPOLIA_CHAIN_ID.toString(16)}`,\r\n                                        chainName: 'Base Sepolia',\r\n                                        nativeCurrency: {\r\n                                            name: 'Ether',\r\n                                            symbol: 'ETH',\r\n                                            decimals: 18\r\n                                        },\r\n                                        rpcUrls: [BASE_SEPOLIA_RPC_URL],\r\n                                        blockExplorerUrls: ['https://sepolia.basescan.org/']\r\n                                    },\r\n                                ],\r\n                            });\r\n                        } catch (addError) {\r\n                            setStatus(\"Failed to add Base Sepolia network\");\r\n                            console.error(addError);\r\n                        }\r\n                    } else {\r\n                        setStatus(\"User denied account access or network switch\");\r\n                        console.error(error);\r\n                    }\r\n                }\r\n            } else {\r\n                setStatus(\"Please install MetaMask!\");\r\n            }\r\n        };\r\n        init();\r\n    }, []);\r\n    \r\n    const handleMint = async () => {\r\n        if (contract) {\r\n            try {\r\n                setStatus(\"Minting...\");\r\n                const tx = await contract.mint(quantity, { value: ethers.parseEther((mintPrice * quantity).toString()) });\r\n                await tx.wait();\r\n                setStatus(\"Minting successful!\");\r\n            } catch (error) {\r\n                setStatus(`Minting failed: ${error.message}`);\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mint-container\">\r\n            <h1>Mint Your InkTinyCow</h1>\r\n            <p>Current Price: {mintPrice} ETH</p>\r\n            <label>\r\n                Number to Mint:\r\n                <input \r\n                    type=\"number\" \r\n                    value={quantity} \r\n                    onChange={(e) => setQuantity(parseInt(e.target.value, 10))} \r\n                    min=\"1\" max=\"20\" \r\n                />\r\n            </label>\r\n            <br />\r\n            <button onClick={handleMint}>Mint</button>\r\n            <p>{status}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MintNFT;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}